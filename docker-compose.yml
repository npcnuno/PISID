services:
  mongo1:
    image: mongo:latest
    hostname: mongo1
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=adminpass
    command: mongod --replSet my-mongo-set --auth --keyFile /etc/mongo-keyfile
    volumes:
      - ./mongo-keyfile:/etc/mongo-keyfile:ro
      - mongo1_data:/data/db
    ports:
      - "30001:27017"
    networks:
      - db-network

  mongo2:
    image: mongo:latest
    hostname: mongo2
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=adminpass
    command: mongod --replSet my-mongo-set --auth --keyFile /etc/mongo-keyfile
    volumes:
      - ./mongo-keyfile:/etc/mongo-keyfile:ro
      - mongo2_data:/data/db
    ports:
      - "30002:27017"
    networks:
      - db-network

  mongo3:
    image: mongo:latest
    hostname: mongo3
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=adminpass
    command: mongod --replSet my-mongo-set --auth --keyFile /etc/mongo-keyfile
    volumes:
      - ./mongo-keyfile:/etc/mongo-keyfile:ro
      - mongo3_data:/data/db
    ports:
      - "30003:27017"
    networks:
      - db-network

  mongoinit:
    image: mongo:latest
    depends_on:
      - mongo1
      - mongo2
      - mongo3
    command: >
      bash -c "
        echo "IF RUNNING ON WINDOWS CHANGE THE MEMBERS IN DOCKER COMPOSE"
        echo 'Waiting for MongoDB instances...'
      until mongosh --host mongo1:27017 -u admin -p adminpass --authenticationDatabase admin --eval 'db.adminCommand(\"ping\")' && \
            mongosh --host mongo2:27017 -u admin -p adminpass --authenticationDatabase admin --eval 'db.adminCommand(\"ping\")' && \
            mongosh --host mongo3:27017 -u admin -p adminpass --authenticationDatabase admin --eval 'db.adminCommand(\"ping\")'; do
        echo 'Waiting...'
        sleep 5
      done
      echo 'Initiating replica set...'
      mongosh --host mongo1:27017 -u admin -p adminpass --authenticationDatabase admin --eval '
        rs.initiate({
          _id: \"my-mongo-set\",
          members: [
            members: [
            {_id: 0, host: "172.17.0.1:30001", priority: 3},
            {_id: 1, host: "172.17.0.1:30002", priority: 2},
            {_id: 2, host: "172.17.0.1:30003", priority: 1}
            ]
          ]
        });
        while (rs.status().ok !== 1) { sleep(1000); print(\"Waiting for replica set...\"); }
        print(\"Replica set initialized!\");
      '
      "
    networks:
      - db-network

  game_fixed:
    build: ./game
    depends_on:
      - mongo1
      - mongo2
      - mongo3
      - mysql
      - mongoinit
    networks:
      - db-network
    environment:
      PLAYER_ID: "33"
      MQTT_BROKER: broker.mqtt-dashboard.com
      MQTT_PORT: "1883"
      MOVEMENT_TOPIC: pisid_mazemov_33
      SOUND_TOPIC: pisid_mazesound_33
      MONGO_USER: admin
      MONGO_PASS: adminpass
      MONGO_DB: game_monitoring
      MONGO_AUTH_SOURCE: admin
    restart: "unless-stopped"

  mysql:
    image: mysql:8
    container_name: mysql
    networks:
      - db-network
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: rootpass
      MYSQL_DATABASE: labirinto_mysql
      MYSQL_USER: labuser
      MYSQL_PASSWORD: labpass
    volumes:
      - mysql_data:/var/lib/mysql
      - ./initdb:/docker-entrypoint-initdb.d

networks:
  db-network:
    driver: bridge

volumes:
  mongo1_data:
  mongo2_data:
  mongo3_data:
  mysql_data:
